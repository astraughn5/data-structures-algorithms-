 
const grid = [
	['W', 'L', 'W', 'W', 'W'],
	['W', 'L', 'W', 'W', 'W'],
	['W', 'W', 'W', 'L', 'W'],
	['W', 'W', 'L', 'L', 'W'],
	['L', 'W', 'W', 'L', 'L'],
	['L', 'L', 'W', 'W', 'W']
 ]
  
 //return the minimum island count of the islands within the grid graph
 // main function that manages the node traversal, help function that traverses the neighbors
 
 const minIsland = (grid) => {
   const visited = new Set()
   let max = 0
   for (let r = 0; r < grid.length; r++){
	 for (let c = 0; c < grid[0].length; c++){
	   const size = explore(grid, r, c, visited)
	   if(max < size && size > 0){
		 max = size
	   }
	 }
   }
   return max
 }
 
 const explore = (grid, r, c, visited) => {
   const rowInBounds = 0 <= r && r < grid.length
   const colInBounds = 0 <= c && c < grid[0].length
   
   if (!rowInBounds || !colInBounds){
	 return 0
   }
 
   if (grid[r][c] === 'W'){
	 return 0
   }
 
   const pos = r + ',' + c
   if (visited.has(pos)){
	 return 0
   }
   visited.add(pos)
   let size = 1
   
   size += explore(grid, r - 1, c, visited)
   size += explore(grid, r + 1, c, visited)
   size += explore(grid, r, c - 1, visited)
   size += explore(grid, r, c + 1, visited)
 
   return size
 }
 console.log(minIsland(grid))
 
   

// const graph = {
// 	a: ['b', 'c'],
// 	b: ['d'],
// 	c: ['e'],
// 	d: ['f'],
// 	e: [],
// 	f: [],
// 	}
	//establish a result and a stack
	// loop while stack is not empy and add to result
	
	function depthFirstSearch(graph, source){
	  let result = []
	  let stack = [source]
	  while (stack.length > 0){
		const current = stack.pop()
		result.push(current)
	
		for (let neighbor of graph[current]){
		   stack.push(neighbor)
		}
	  }
	  
	  return result
	}

	//console.log(depthFirstSearch(graph, 'a'))
	
	function bfs(graph, source){
	  let result = []
	  let queue = [source]
	
	  while (queue.length > 0){
		const current = queue.shift()
		result.push(current)
	
		for (let neighbor of graph[current]){
		  queue.push(neighbor)
		}
	  }
	  return result
	}
	
//console.log(bfs(graph, 'a'))



/*
function dfsPrint(graph, source){ //this is only for directed graphs, undirected will be endless loop
	let result = []
	const stack = [source]
	while(stack.length > 0){
		const current = stack.pop()
		result.push(current)
		//console.log(current)
		console.log(graph)
		//console.log(graph.adjacentList[current])
		for (let neighbor of graph[current]){
			stack.push(neighbor)
		}
	}
	return result
}

function bfsPrint(graph, source){ //only for directed graphs
	const queue = [source]
	let result = []
	while (queue.length > 0){
		const current = queue.shift()
		result.push(current)
		for (let neighbor of graph[current]){
			queue.push(neighbor)
		}
	}
}
*/